services:
  # ----------------------------------------------------
  # Backend サービス: Go 言語の AP サーバー
  # ----------------------------------------------------
  backend:
    container_name: tuning-backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      TRACE_ENABLED: "true"
      JAEGER_ENDPOINT: "http://jaeger:14268/api/traces"
      TRACE_SAMPLE_RATIO: "1.0"
      DATABASE_URL: user:password@tcp(db:3306)/42Tokyo2508-db
      PORT: 8080
    working_dir: /usr/src/backend
    volumes:
      # 画像ファイル用のボリュームを追加
      - ./images:/app/images:ro
      - ./backend:/usr/src/backend
    # ports:
    networks:
      - webapp-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS -o /dev/null http://127.0.0.1:${PORT:-8080}/api/health || exit 1",
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 600s

  # ----------------------------------------------------
  # Frontend サービス: クライアントサイドの Web アプリケーション
  # ----------------------------------------------------
  frontend:
    container_name: tuning-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    working_dir: /usr/src/frontend
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/usr/src/frontend
    networks:
      - webapp-network
    depends_on:
      backend:
        condition: service_healthy
    entrypoint: ["sh", "-c", "yarn install --frozen-lockfile && yarn dev"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS -o /dev/null -X GET http://localhost:3000/health-check || exit 1",
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 300s

  # ----------------------------------------------------
  # DB サービス: MySQL データベース (Makefile の設定を移行)
  # ----------------------------------------------------
  db:
    container_name: tuning-mysql
    image: 42tokyo2508.azurecr.io/mysql:base
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: 42Tokyo2508-db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "13306:3306"
    volumes:
      - ./mysql/init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql/conf.d:/etc/mysql/conf.d
      - ./mysql/migration:/etc/mysql/migration
      - ./mysql/local_data:/var/lib/mysql
      - ./mysql/init/restoreSQL:/docker-entrypoint-initdb.d/init/restoreSQL
    networks:
      - webapp-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "127.0.0.1",
          "-u",
          "root",
          "-p$$MYSQL_ROOT_PASSWORD",
        ]
      interval: 5s
      timeout: 30s
      retries: 10
      start_period: 1500s
  # ----------------------------------------------------
  # Nginx サービス: リバースプロキシと静的ファイル配信
  # ----------------------------------------------------
  nginx:
    container_name: tuning-nginx
    image: 42tokyo2508.azurecr.io/nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.local.conf:/etc/nginx/nginx.conf
    networks:
      - webapp-network
    depends_on:
      frontend:
        condition: service_healthy
        required: true
      backend:
        condition: service_healthy
        required: true
    command: ["nginx", "-g", "daemon off;"]

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.46
    command:
      - "--query.base-path=/jaeger"
    # ports:
    # - "16686:16686" # Jaeger UI
    # - "14268:14268" # Jaeger collector
    # - "14250:14250" # Jaeger gRPC collector
    # - "4318:4318" # OpenTelemetry gRPC receiver
    networks:
      - webapp-network

  redis:
    image: redis:alpine
    container_name: tuning-redis
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes # データ永続化
    restart: unless-stopped
    networks:
      - webapp-network

# ----------------------------------------------------
# ネットワーク定義: コンテナ間の通信
# ----------------------------------------------------
networks:
  webapp-network:
    name: webapp-network
    external: true

volumes:
  # 保存先のvolume名は、webapp_redis_data
  redis_data:
