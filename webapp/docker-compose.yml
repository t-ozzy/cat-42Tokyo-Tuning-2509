services:
  # ----------------------------------------------------
  # Backend サービス: Go 言語の AP サーバー
  # ----------------------------------------------------
  backend:
    container_name: tuning-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    environment:
      TZ: Asia/Tokyo
      DATABASE_URL: user:password@tcp(db:3306)/42Tokyo2508-db
      TRACE_ENABLED: "true" # いらない時はfalse
      JAEGER_ENDPOINT: "http://jaeger:14268/api/traces"
      TRACE_SAMPLE_RATIO: "1.0"
      # OTEL_TRACES_SAMPLER: "always_off"
    ports:
      - "8080:8080"
    working_dir: /usr/src/backend
    volumes:
      - ./images:/app/images:ro
    networks:
      - webapp-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD", "curl", "-I", "http://localhost:8080/api/health", "-X", "GET"]
      interval: 5s
      timeout: 30s
      retries: 10
      start_period: 30s

  # ----------------------------------------------------
  # Frontend サービス: クライアントサイドの Web アプリケーション
  # ----------------------------------------------------
  frontend:
    container_name: tuning-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    environment:
      - API_BASE_URL=https://${HOSTNAME}.ftt2508.dabaas.net
      - TZ=Asia/Tokyo
    ports:
      - "3000:3000"
    networks:
      - webapp-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health-check"]
      interval: 5s
      timeout: 5s
      retries: 6
      start_period: 20s
    entrypoint: ["sh", "-c", "yarn start --hostname 0.0.0.0 --port 3000"]

  # ----------------------------------------------------
  # DB サービス: MySQL データベース (Makefile の設定を移行)
  # ----------------------------------------------------
  db:
    container_name: tuning-mysql
    image: 42tokyo2508.azurecr.io/mysql:base
    environment:
      TZ: Asia/Tokyo
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: 42Tokyo2508-db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/init/remote_csv:/docker-entrypoint-initdb.d/csv
      - ./mysql/init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql/init/restoreSQL:/docker-entrypoint-initdb.d/init/restoreSQL
      - ./mysql/conf.d:/etc/mysql/conf.d
      - ./mysql/migration:/etc/mysql/migration
      - ./mysql/data:/var/lib/mysql
    networks:
      - webapp-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "127.0.0.1",
          "-u",
          "root",
          "-p$$MYSQL_ROOT_PASSWORD",
        ]
      interval: 5s
      timeout: 30s
      retries: 10
      start_period: 1000s
  # ----------------------------------------------------
  # Nginx サービス: リバースプロキシと静的ファイル配信
  # ----------------------------------------------------
  nginx:
    container_name: tuning-nginx
    image: 42tokyo2508.azurecr.io/nginx:latest
    environment:
      TZ: Asia/Tokyo
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /da/tls:/da/tls:ro
    networks:
      - webapp-network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.46
    environment:
      TZ: Asia/Tokyo
    command:
      - "--query.base-path=/jaeger"
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector
      - "14250:14250" # Jaeger gRPC collector
      - "4318:4318" # OpenTelemetry gRPC receiver
    networks:
      - webapp-network

  redis:
    image: redis:alpine
    container_name: tuning-redis
    ports:
      - "6379:6379" # 開発環境では公開、本番では内部ネットワークのみ
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes # データ永続化
    restart: unless-stopped
    networks:
      - webapp-network

# ----------------------------------------------------
# ネットワーク定義: コンテナ間の通信
# ----------------------------------------------------
networks:
  webapp-network:
    name: webapp-network
    external: true

volumes:
  # 保存先のvolume名は、webapp_redis_data
  redis_data:
